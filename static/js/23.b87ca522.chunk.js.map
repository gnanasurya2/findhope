{"version":3,"sources":["styles/ImageCropper.module.css","components/ImageCropper.js","containers/ProfileMaker.js"],"names":["module","exports","ImageCropper","props","useState","upImg","setUpImg","imgRef","useRef","previewCanvasRef","unit","width","aspect","crop","setCrop","completedCrop","setCompletedCrop","useEffect","current","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","setTransform","imageSmoothingEnabled","drawImage","x","y","generateDownload","previewCanvas","newWidth","newHeight","tmpCanvas","document","createElement","getResizedCanvas","toBlob","blob","storageRef","firebase","storage","ref","child","name","put","then","snapshot","getDownloadURL","url","submit","onLoad","useCallback","img","className","styles","wrapper","type","accept","onChange","event","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","src","onImageLoaded","c","onComplete","preview","style","onClick","ProfileMaker","redirect","setRedirect","setName","toggle","setToggle","title","useParams","db","firestore","history","useHistory","submitHandler","path","data","JSON","parse","sessionStorage","getItem","collection","doc","toLowerCase","update","members","role","push","catch","err","alert","message","to","imageUploader","flex","Input","value","onChangeText","PrimaryButton"],"mappings":"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","file":"static/js/23.b87ca522.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ImageCropper_wrapper__1nCsw\",\"preview\":\"ImageCropper_preview__2OrzB\"};","import React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport styles from \"../styles/ImageCropper.module.css\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport firebase from \"../helpers/firebase\";\r\nimport Button from \"../components/PrimaryButton\";\r\n\r\nconst pixelRatio = 4;\r\nconst ImageCropper = (props) => {\r\n  const [upImg, setUpImg] = useState();\r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n  const [crop, setCrop] = useState({ unit: \"px\", width: 100, aspect: 1 });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingEnabled = false;\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n  }, [completedCrop]);\r\n\r\n  const onSelectFile = (event) => {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  };\r\n  const getResizedCanvas = (canvas, newWidth, newHeight) => {\r\n    const tmpCanvas = document.createElement(\"canvas\");\r\n    tmpCanvas.width = newWidth;\r\n    tmpCanvas.height = newHeight;\r\n\r\n    const ctx = tmpCanvas.getContext(\"2d\");\r\n    ctx.drawImage(\r\n      canvas,\r\n      0,\r\n      0,\r\n      canvas.width,\r\n      canvas.height,\r\n      0,\r\n      0,\r\n      newWidth,\r\n      newHeight\r\n    );\r\n\r\n    return tmpCanvas;\r\n  };\r\n\r\n  const generateDownload = (previewCanvas, crop) => {\r\n    if (!crop || !previewCanvas) {\r\n      return;\r\n    }\r\n\r\n    const canvas = getResizedCanvas(previewCanvas, crop.width, crop.height);\r\n    canvas.toBlob(\r\n      (blob) => {\r\n        const storageRef = firebase\r\n          .storage()\r\n          .ref()\r\n          .child(props.name + \".png\");\r\n        storageRef.put(blob).then((snapshot) => {\r\n          storageRef.getDownloadURL().then((url) => props.submit(url));\r\n        });\r\n      },\r\n      \"image/png\",\r\n      1\r\n    );\r\n  };\r\n\r\n  const onLoad = useCallback((img) => (imgRef.current = img), []);\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>\r\n        <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\r\n      </div>\r\n      <ReactCrop\r\n        src={upImg}\r\n        onImageLoaded={onLoad}\r\n        crop={crop}\r\n        onChange={(c) => setCrop(c)}\r\n        onComplete={(c) => setCompletedCrop(c)}\r\n      />\r\n      {completedCrop?.width || completedCrop?.height ? (\r\n        <div\r\n          className={styles.preview}\r\n          style={{ width: completedCrop.width, height: completedCrop.height }}\r\n        >\r\n          <canvas\r\n            ref={previewCanvasRef}\r\n            style={{\r\n              width: completedCrop?.width ?? 0,\r\n              height: completedCrop?.height ?? 0,\r\n            }}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {completedCrop?.width || completedCrop?.height ? (\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() =>\r\n            generateDownload(previewCanvasRef.current, completedCrop)\r\n          }\r\n        >\r\n          Upload\r\n        </Button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCropper;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"../styles/profileMaker.module.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Input from \"../components/Input\";\r\nimport ImageCropper from \"../components/ImageCropper\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport firebase from \"../helpers/firebase\";\r\nimport PrimaryButton from \"../components/PrimaryButton\";\r\n\r\nconst ProfileMaker = (props) => {\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [toggle, setToggle] = useState(false);\r\n  const { title } = useParams();\r\n  const db = firebase.firestore();\r\n  const history = useHistory();\r\n\r\n  const submitHandler = (path) => {\r\n    if (!toggle) {\r\n      if (!name.length) {\r\n        alert(\"Enter the name\");\r\n        return;\r\n      }\r\n      setToggle(true);\r\n    } else {\r\n      const data = JSON.parse(sessionStorage.getItem(\"data\"));\r\n      // console.log(path, data, title, name);\r\n      db.collection(\"safespace\")\r\n        .doc(data.name.toLowerCase())\r\n        .update({\r\n          members: [\r\n            ...data.members,\r\n            {\r\n              role: title,\r\n              name: name,\r\n              url: path,\r\n            },\r\n          ],\r\n        })\r\n        .then(() => history.push(\"/safespace\"))\r\n        .catch((err) => alert(err.message));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (!token) {\r\n      setRedirect(true);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      {redirect ? <Redirect to=\"/login\" /> : null}\r\n\r\n      <div className={styles.imageUploader}>\r\n        {toggle ? (\r\n          <ImageCropper submit={submitHandler} name={name} />\r\n        ) : (\r\n          <div className={styles.flex}>\r\n            <Input\r\n              title=\"enter the name\"\r\n              value={name}\r\n              onChangeText={(event) => setName(event.target.value)}\r\n            />\r\n            <PrimaryButton title=\"Next\" onClick={submitHandler} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileMaker;\r\n"],"sourceRoot":""}