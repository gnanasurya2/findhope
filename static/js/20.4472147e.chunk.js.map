{"version":3,"sources":["styles/Result.module.css","components/CircleBar.js","components/Wrapper.js","components/ToggleButton.js","components/Solutions.js","containers/Result.js"],"names":["module","exports","Svg","styled","svg","Circle","animated","circle","Text","text","CircleBar","size","progress","strokeWidth","circleOneStroke","circleTwoStroke","circleRef","useRef","radius","circumference","Math","PI","useSpring","offset","config","slow","number","value","set","useEffect","center","Fragment","width","height","stroke","cx","cy","r","style","transform","transformOrigin","strokeDashoffset","interpolate","x","ref","strokeDasharray","y","toFixed","Card","div","Wrapper","props","children","Button","button","color","opacit","ToggleButton","opacity","onClick","clicked","title","Title","h1","Content","p","Solutions","content","UL","ul","LI","li","Result","useState","tips","setTips","setTitle","solutions","setSolutions","active","setActive","data","setData","percentile","setPercentile","params","useParams","str","s","score","name","testname","Arr","push","trunc","DepressionData","depression","anxiety","clickHandler","id","toggle","className","styles","wrapper","resultTitle","length","buttonWrapper","solutionTitle","solutionsTitle","map","solution"],"mappings":"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","file":"static/js/20.4472147e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Result_wrapper__NbxKV\",\"resultTitle\":\"Result_resultTitle__oDX3E\",\"buttonWrapper\":\"Result_buttonWrapper__1DIrS\",\"solutionTitle\":\"Result_solutionTitle__2uOAs\"};","import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useSpring, animated, config } from \"react-spring\";\nconst Svg = styled.svg`\n  display: block;\n  margin: 20px auto;\n  max-widtdh: 100%;\n`;\n\nconst Circle = styled(animated.circle)`\n  fill: none;\n`;\n\nconst Text = styled(animated.text)`\n  font-size: 3rem;\n  text-anchor: middle;\n  fill: #000;\n  font-weight: bold;\n`;\nconst CircleBar = ({\n  size,\n  progress,\n  strokeWidth,\n  circleOneStroke,\n  circleTwoStroke,\n}) => {\n  const circleRef = useRef(null);\n  const radius = size / 2 - strokeWidth / 2;\n  const circumference = 2 * Math.PI * radius;\n  const [value, set] = useSpring(() => ({\n    offset: circumference,\n    config: config.slow,\n    number: 0,\n  }));\n  useEffect(() => {\n    const progressOffset = circumference - (progress / 100) * circumference;\n    set({ offset: progressOffset, number: progress });\n  }, [set, circumference, progress]);\n\n  const center = size / 2;\n\n  return (\n    <React.Fragment>\n      <Svg width={size} height={size}>\n        <Circle\n          stroke={circleOneStroke}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n        />\n        <Circle\n          style={{\n            transform: \"rotate(-90deg)\",\n            transformOrigin: \"50% 50%\",\n            strokeDashoffset: value.offset.interpolate((x) => x),\n          }}\n          ref={circleRef}\n          stroke={circleTwoStroke}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n        />\n        <Text x={center + 8} y={center + 18}>\n          {value.number.interpolate((x) => x.toFixed(0) + \"%\")}\n        </Text>\n      </Svg>\n    </React.Fragment>\n  );\n};\n\nexport default CircleBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  width: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 22px;\n  padding: 40px 10px;\n  margin-top: 40px;\n  margin-bottom: 20px;\n  box-shadow: 0px 2px 20px 0px rgba(0, 0, 0, 0.2);\n  @media screen and (min-width: 700px) {\n    width: 60%;\n  }\n  @media screen and (min-width: 1200px) {\n    width: 40%;\n  }\n`;\n\nconst Wrapper = (props) => <Card>{props.children}</Card>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  padding: 5px;\n  width: 50px;\n  height: 50px;\n  border: none;\n  background-color: ${(props) => props.color};\n  border-radius: 50%;\n  font-size: 20px;\n  color: white;\n  opacity: ${(props) => (props.opacit ? \"0.3\" : \"1\")};\n  cursor: pointer;\n  transition: all 0.2s linear;\n`;\n\nconst ToggleButton = (props) => (\n  <Button color={props.color} opacit={props.opacity} onClick={props.clicked}>\n    {props.title}\n  </Button>\n);\n\nexport default ToggleButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 15px 0px;\n`;\n\nconst Title = styled.h1`\n  width: 90%;\n  text-align: center;\n`;\n\nconst Content = styled.p`\n  width: 85%;\n  text-align: center;\n  font-size: 20px;\n  line-height: 28px;\n  padding: 10px 0px;\n`;\n\nconst Solutions = (props) => (\n  <Wrapper>\n    <Title>{props.title}</Title>\n    <Content>{props.content}</Content>\n  </Wrapper>\n);\n\nexport default Solutions;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/Result.module.css\";\n\nimport CircleBar from \"../components/CircleBar\";\nimport { useParams } from \"react-router-dom\";\nimport Wrapper from \"../components/Wrapper\";\nimport ToggleButton from \"../components/ToggleButton\";\nimport Solutions from \"../components/Solutions\";\nimport DepressionData from \"../helpers/Depression.json\";\nimport styled from \"styled-components\";\n\nconst UL = styled.ul`\n  list-style: none;\n  margin-top: 40px;\n`;\nconst LI = styled.li`\n  font-size: 24px;\n  text-align: center;\n  font-weight: bold;\n`;\nconst Result = (props) => {\n  const [tips, setTips] = useState([false, true, true]);\n  const [title, setTitle] = useState(\"\");\n  const [solutions, setSolutions] = useState([0, 1, 2]);\n  const [active, setActive] = useState(0);\n  const [data, setData] = useState([]);\n  const [percentile, setPercentile] = useState(1);\n  const params = useParams();\n\n  useEffect(() => {\n    let s = params.score;\n    let str;\n    let name = params.testname;\n\n    if (name === \"Depression\") {\n      let Arr = [];\n      let tips = params.tips;\n      if (tips < 100) {\n        Arr.push(0);\n      }\n      while (tips > 0) {\n        Arr.push(tips % 10);\n        tips = Math.trunc(tips / 10);\n      }\n      setSolutions(Arr);\n      setActive(Arr[0]);\n\n      setData(DepressionData.depression);\n      setPercentile(27);\n      if (s <= 4) {\n        str = \"Minimal depression\";\n      } else if (s > 4 && s <= 9) {\n        str = \"Mild depression\";\n      } else if (s > 9 && s <= 14) {\n        str = \"Moderate depression\";\n      } else if (s > 14 && s <= 19) {\n        str = \"Moderately severe depression\";\n      } else {\n        str = \"Severe depression\";\n      }\n    } else if (name === \"Anxiety\") {\n      setData(DepressionData.anxiety);\n      setPercentile(21);\n      if (s <= 5) {\n        str = \"Minimal anxiety\";\n      } else if (s > 5 && s <= 9) {\n        str = \"Mild anxiety\";\n      } else if (s > 9 && s <= 14) {\n        str = \"Moderate anxiety\";\n      } else {\n        str = \"Severe anxiety\";\n      }\n    } else if (name === \"Stress\") {\n      setPercentile(40);\n      if (s < 13) {\n        str = \"Low stress\";\n      } else if (s >= 13 && s < 26) {\n        str = \"Moderate stress\";\n      } else {\n        str = \"High perceived stress\";\n      }\n    }\n\n    setTitle(str);\n  }, [params.score, params.testname, params.tips]);\n\n  const clickHandler = (id) => {\n    const toggle = [true, true, true];\n    toggle[id] = false;\n    setTips(toggle);\n    setActive(solutions[id]);\n  };\n  return (\n    <div className={styles.wrapper}>\n      <h1 className={styles.resultTitle}>Result: {title}</h1>\n      <CircleBar\n        progress={(+params.score / percentile) * 100}\n        circleOneStroke=\"#F5F5F5\"\n        circleTwoStroke=\"#70db70\"\n        size={260}\n        strokeWidth={14}\n      />\n      {data.length ? (\n        <>\n          {data[solutions[0]].title !== \"\" ? (\n            <Wrapper>\n              <h1>What is affecting you:</h1>\n              <UL>\n                <LI>{data[solutions[0]].title}</LI>\n                <LI>{data[solutions[1]].title}</LI>\n                <LI>{data[solutions[2]].title}</LI>\n              </UL>\n            </Wrapper>\n          ) : null}\n\n          <Wrapper>\n            <h1>Suggested solutions</h1>\n            <div className={styles.buttonWrapper}>\n              <ToggleButton\n                title=\"1\"\n                color=\"#70db70\"\n                opacity={tips[0]}\n                clicked={() => clickHandler(0)}\n              />\n              <ToggleButton\n                title=\"2\"\n                color=\"#70db70\"\n                opacity={tips[1]}\n                clicked={() => clickHandler(1)}\n              />\n              <ToggleButton\n                title=\"3\"\n                color=\"#70db70\"\n                opacity={tips[2]}\n                clicked={() => clickHandler(2)}\n              />\n            </div>\n            <h1 className={styles.solutionTitle}>\n              {data[active].solutionsTitle}\n            </h1>\n            {data[active].solutions.map((solution) => (\n              <Solutions title={solution.title} content={solution.content} />\n            ))}\n          </Wrapper>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Result;\n"],"sourceRoot":""}