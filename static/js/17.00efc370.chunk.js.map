{"version":3,"sources":["components/ProgressBar.js","components/Option.js","containers/Questions.js","styles/Questions.module.css"],"names":["Wrapper","styled","div","InnerWrapper","animated","ProgressBar","props","useSpring","width","progress","value","set","useEffect","style","interpolate","x","Button","button","Option","onClick","clicked","title","Questions","useState","questions","setQuestions","testname","useParams","jump","setJump","question","setQuestion","setProgress","points","setPoints","options","setOptions","redirect","setRedirect","data","setData","tips","setTips","length","questionsData","depression","stress","anxiety","push","to","className","styles","wrapper","questionWrapper","optionsWrapper","map","ele","index","id","state","concat","final","sort","a","b","splice","clickHandler","module","exports"],"mappings":"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","file":"static/js/17.00efc370.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useSpring, animated } from \"react-spring\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 20px;\n`;\nconst InnerWrapper = styled(animated.div)`\n  width: 30%;\n  height: 100%;\n  background-color: #70db70;\n`;\nconst ProgressBar = (props) => {\n  const [value, set] = useSpring(() => ({ width: props.progress || 0 }));\n  useEffect(() => {\n    set({ width: props.progress });\n  }, [props.progress, set]);\n  return (\n    <Wrapper>\n      <InnerWrapper\n        style={{ width: value.width.interpolate((x) => x + \"%\") }}\n      />\n    </Wrapper>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  width: 280px;\n  border: solid 2px #70db70;\n  padding: 12px 40px;\n  margin: 15px 0px;\n  font-size: 20px;\n  border-radius: 30px;\n  color: #70db70;\n  background-color: transparent;\n  cursor: pointer;\n  transition: all 0.1s linear;\n  &:hover {\n    background-color: #70db70;\n    color: white;\n  }\n`;\n\nconst Option = (props) => {\n  return <Button onClick={props.clicked}>{props.title}</Button>;\n};\n\nexport default Option;\n","import React, { useState, useEffect } from \"react\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport Option from \"../components/Option\";\nimport styles from \"../styles/Questions.module.css\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport questionsData from \"../helpers/questions.json\";\n\nconst Questions = (props) => {\n  const [questions, setQuestions] = useState([]);\n  const { testname } = useParams();\n  const [jump, setJump] = useState(0);\n  const [question, setQuestion] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [options, setOptions] = useState([\n    \"Not at all\",\n    \"Several days\",\n    \"More than half days\",\n    \"Nearly everyday\",\n  ]);\n  const [redirect, setRedirect] = useState(false);\n  const [data, setData] = useState([]);\n  const [tips, setTips] = useState(0);\n\n  useEffect(() => {\n    setJump(100 / questions.length);\n  }, [questions]);\n  useEffect(() => {\n    if (testname === \"Depression\") {\n      setQuestions(questionsData.depression);\n    } else if (testname === \"Stress\") {\n      setQuestions(questionsData.stress);\n      setOptions([\n        \"Never\",\n        \"Almost never\",\n        \"Sometimes\",\n        \"Fairly often\",\n        \"Very often\",\n      ]);\n    } else if (testname === \"Anxiety\") {\n      setQuestions(questionsData.anxiety);\n    }\n  }, [setQuestions, testname]);\n  const clickHandler = (id) => {\n    if (question < questions.length) {\n      setProgress((state) => state + jump);\n      setQuestion((state) => state + 1);\n      if (testname === \"Stress\" && (question === 3 || 4 || 6 || 7)) {\n        setPoints((state) => state + (4 - id));\n      } else {\n        setPoints((state) => state + id);\n      }\n      setData(data.concat(id));\n    }\n    if (question === questions.length - 1) {\n      setRedirect(true);\n      let final = data.map((ele, index) => [ele, index]);\n      final = final.sort((a, b) => b[0] - a[0]).splice(0, 3);\n      let value = 0;\n      for (let ele of final) {\n        value = value * 10 + ele[1];\n      }\n      setTips(value);\n    }\n  };\n  return (\n    <div>\n      {redirect ? (\n        <Redirect push to={`/result/${testname}/${points}/${tips}`} />\n      ) : null}\n      <div className={styles.wrapper}>\n        <ProgressBar progress={progress} />\n        <div className={styles.questionWrapper}>\n          <h1 className={styles.question}>{questions[question]}</h1>\n        </div>\n        <div className={styles.optionsWrapper}>\n          {options.map((ele, index) => (\n            <Option title={ele} clicked={() => clickHandler(index)} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Questions;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Questions_wrapper__2Ogi_\",\"questionWrapper\":\"Questions_questionWrapper__2aXAD\",\"optionsWrapper\":\"Questions_optionsWrapper__rhT6X\"};"],"sourceRoot":""}