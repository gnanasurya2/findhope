{"version":3,"sources":["styles/Questions.module.css","components/ProgressBar.js","components/Option.js","containers/Questions.js"],"names":["module","exports","Wrapper","styled","div","InnerWrapper","animated","ProgressBar","props","useSpring","width","progress","value","set","useEffect","style","interpolate","x","Button","button","Option","onClick","clicked","title","Questions","useState","questions","setQuestions","testname","useParams","jump","setJump","question","setQuestion","setProgress","points","setPoints","options","setOptions","redirect","setRedirect","data","setData","tips","setTips","length","questionsData","depression","stress","anxiety","push","to","className","styles","wrapper","questionWrapper","optionsWrapper","map","ele","index","id","state","concat","final","sort","a","b","splice","clickHandler"],"mappings":"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","file":"static/js/20.3f56f93c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Questions_wrapper__YxM-U\",\"questionWrapper\":\"Questions_questionWrapper__26CCv\",\"optionsWrapper\":\"Questions_optionsWrapper__MiEXi\"};","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 20px;\r\n`;\r\nconst InnerWrapper = styled(animated.div)`\r\n  width: 30%;\r\n  height: 100%;\r\n  background-color: #70db70;\r\n`;\r\nconst ProgressBar = (props) => {\r\n  const [value, set] = useSpring(() => ({ width: props.progress || 0 }));\r\n  useEffect(() => {\r\n    set({ width: props.progress });\r\n  }, [props.progress, set]);\r\n  return (\r\n    <Wrapper>\r\n      <InnerWrapper\r\n        style={{ width: value.width.interpolate((x) => x + \"%\") }}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  width: 280px;\r\n  border: solid 2px #70db70;\r\n  padding: 12px 40px;\r\n  margin: 15px 0px;\r\n  font-size: 20px;\r\n  border-radius: 30px;\r\n  color: #70db70;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  transition: all 0.1s linear;\r\n  &:hover {\r\n    background-color: #70db70;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Option = (props) => {\r\n  return <Button onClick={props.clicked}>{props.title}</Button>;\r\n};\r\n\r\nexport default Option;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProgressBar from \"../components/ProgressBar\";\r\nimport Option from \"../components/Option\";\r\nimport styles from \"../styles/Questions.module.css\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport questionsData from \"../helpers/questions.json\";\r\n\r\nconst Questions = (props) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const { testname } = useParams();\r\n  const [jump, setJump] = useState(0);\r\n  const [question, setQuestion] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [points, setPoints] = useState(0);\r\n  const [options, setOptions] = useState([\r\n    \"Not at all\",\r\n    \"Several days\",\r\n    \"More than half days\",\r\n    \"Nearly everyday\",\r\n  ]);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [tips, setTips] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setJump(100 / questions.length);\r\n  }, [questions]);\r\n  useEffect(() => {\r\n    if (testname === \"Depression\") {\r\n      setQuestions(questionsData.depression);\r\n    } else if (testname === \"Stress\") {\r\n      setQuestions(questionsData.stress);\r\n      setOptions([\r\n        \"Never\",\r\n        \"Almost never\",\r\n        \"Sometimes\",\r\n        \"Fairly often\",\r\n        \"Very often\",\r\n      ]);\r\n    } else if (testname === \"Anxiety\") {\r\n      setQuestions(questionsData.anxiety);\r\n    }\r\n  }, [setQuestions, testname]);\r\n  const clickHandler = (id) => {\r\n    if (question < questions.length) {\r\n      setProgress((state) => state + jump);\r\n      setQuestion((state) => state + 1);\r\n      if (testname === \"Stress\" && (question === 3 || 4 || 6 || 7)) {\r\n        setPoints((state) => state + (4 - id));\r\n      } else {\r\n        setPoints((state) => state + id);\r\n      }\r\n      setData(data.concat(id));\r\n    }\r\n    if (question === questions.length - 1) {\r\n      setRedirect(true);\r\n      let final = data.map((ele, index) => [ele, index]);\r\n      final = final.sort((a, b) => b[0] - a[0]).splice(0, 3);\r\n      let value = 0;\r\n      for (let ele of final) {\r\n        value = value * 10 + ele[1];\r\n      }\r\n      setTips(value);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {redirect ? (\r\n        <Redirect push to={`/result/${testname}/${points}/${tips}`} />\r\n      ) : null}\r\n      <div className={styles.wrapper}>\r\n        <ProgressBar progress={progress} />\r\n        <div className={styles.questionWrapper}>\r\n          <h1 className={styles.question}>{questions[question]}</h1>\r\n        </div>\r\n        <div className={styles.optionsWrapper}>\r\n          {options.map((ele, index) => (\r\n            <Option title={ele} clicked={() => clickHandler(index)} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n"],"sourceRoot":""}