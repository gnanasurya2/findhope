{"version":3,"sources":["styles/ImageCropper.module.css","components/ImageCropper.js","containers/ProfileMaker.js"],"names":["module","exports","ImageCropper","props","useState","upImg","setUpImg","imgRef","useRef","previewCanvasRef","unit","width","aspect","crop","setCrop","completedCrop","setCompletedCrop","Firebase","setFirebase","useEffect","firebase","then","current","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","setTransform","imageSmoothingEnabled","drawImage","x","y","generateDownload","previewCanvas","newWidth","newHeight","tmpCanvas","document","createElement","getResizedCanvas","toBlob","blob","storageRef","storage","ref","child","name","put","snapshot","getDownloadURL","url","submit","onLoad","useCallback","img","className","styles","wrapper","type","accept","onChange","event","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","src","onImageLoaded","c","onComplete","preview","style","onClick","ProfileMaker","redirect","setRedirect","setName","toggle","setToggle","db","setDb","title","useParams","history","useHistory","firestore","submitHandler","path","data","JSON","parse","sessionStorage","getItem","collection","doc","toLowerCase","update","members","role","push","catch","err","alert","message","to","imageUploader","flex","Input","value","onChangeText","PrimaryButton"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,QAAU,gC,yKC2IrDC,EApIM,SAACC,GAAW,IAAD,MACJC,qBADI,mBACvBC,EADuB,KAChBC,EADgB,KAExBC,EAASC,iBAAO,MAChBC,EAAmBD,iBAAO,MAHF,EAINJ,mBAAS,CAAEM,KAAM,KAAMC,MAAO,IAAKC,OAAQ,IAJrC,mBAIvBC,EAJuB,KAIjBC,EAJiB,OAKYV,mBAAS,MALrB,mBAKvBW,EALuB,KAKRC,EALQ,OAMEZ,mBAAS,MANX,mBAMvBa,EANuB,KAMbC,EANa,KAO9BC,qBAAU,WACRC,IAASC,MAAK,SAACD,GAAD,OAAcF,EAAYE,QACvC,IACHD,qBAAU,WACR,GAAKJ,GAAkBN,EAAiBa,SAAYf,EAAOe,QAA3D,CAIA,IAAMC,EAAQhB,EAAOe,QACfE,EAASf,EAAiBa,QAC1BT,EAAOE,EAEPU,EAASF,EAAMG,aAAeH,EAAMZ,MACpCgB,EAASJ,EAAMK,cAAgBL,EAAMM,OACrCC,EAAMN,EAAOO,WAAW,MAE9BP,EAAOb,MAxBQ,EAwBAE,EAAKF,MACpBa,EAAOK,OAzBQ,EAyBChB,EAAKgB,OAErBC,EAAIE,aA3BW,EA2Bc,EAAG,EA3BjB,EA2BgC,EAAG,GAClDF,EAAIG,uBAAwB,EAE5BH,EAAII,UACFX,EACAV,EAAKsB,EAAIV,EACTZ,EAAKuB,EAAIT,EACTd,EAAKF,MAAQc,EACbZ,EAAKgB,OAASF,EACd,EACA,EACAd,EAAKF,MACLE,EAAKgB,WAEN,CAACd,IAEJ,IA4BMsB,EAAmB,SAACC,EAAezB,GAClCA,GAASyB,GAtBS,SAACd,EAAQe,EAAUC,GAC1C,IAAMC,EAAYC,SAASC,cAAc,UAiBzC,OAhBAF,EAAU9B,MAAQ4B,EAClBE,EAAUZ,OAASW,EAEPC,EAAUV,WAAW,MAC7BG,UACFV,EACA,EACA,EACAA,EAAOb,MACPa,EAAOK,OACP,EACA,EACAU,EACAC,GAGKC,EAQQG,CAAiBN,EAAezB,EAAKF,MAAOE,EAAKgB,QACzDgB,QACL,SAACC,GACC,IAAMC,EAAa9B,EAAS+B,UACzBC,MACAC,MAAM/C,EAAMgD,KAAO,QACtBJ,EAAWK,IAAIN,GAAMzB,MAAK,SAACgC,GACzBN,EAAWO,iBAAiBjC,MAAK,SAACkC,GAAD,OAASpD,EAAMqD,OAAOD,WAG3D,YACA,IAIEE,EAASC,uBAAY,SAACC,GAAD,OAAUpD,EAAOe,QAAUqC,IAAM,IAE5D,OACE,yBAAKC,UAAWC,IAAOC,SACrB,6BACE,2BAAOC,KAAK,OAAOC,OAAO,UAAUC,SArDrB,SAACC,GACpB,GAAIA,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAMC,OAAS,EAAG,CACvD,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAMlE,EAASgE,EAAOG,WACtDH,EAAOI,cAAcR,EAAMC,OAAOC,MAAM,SAmDxC,kBAAC,IAAD,CACEO,IAAKtE,EACLuE,cAAenB,EACf5C,KAAMA,EACNoD,SAAU,SAACY,GAAD,OAAO/D,EAAQ+D,IACzBC,WAAY,SAACD,GAAD,OAAO7D,EAAiB6D,OAExB,OAAb9D,QAAa,IAAbA,OAAA,EAAAA,EAAeJ,SAAf,OAAwBI,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAec,QACtC,yBACE+B,UAAWC,IAAOkB,QAClBC,MAAO,CAAErE,MAAOI,EAAcJ,MAAOkB,OAAQd,EAAcc,SAE3D,4BACEoB,IAAKxC,EACLuE,MAAO,CACLrE,MAAK,iBAAEI,QAAF,IAAEA,OAAF,EAAEA,EAAeJ,aAAjB,QAA0B,EAC/BkB,OAAM,iBAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAec,cAAjB,QAA2B,MAIrC,MACU,OAAbd,QAAa,IAAbA,OAAA,EAAAA,EAAeJ,SAAf,OAAwBI,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAec,QACtC,kBAAC,IAAD,CACEkC,KAAK,SACLkB,QAAS,kBACP5C,EAAiB5B,EAAiBa,QAASP,KAH/C,UAQE,OC5DKmE,UAlEM,SAAC/E,GAAW,IAAD,EACEC,oBAAS,GADX,mBACvB+E,EADuB,KACbC,EADa,OAENhF,mBAAS,IAFH,mBAEvB+C,EAFuB,KAEjBkC,EAFiB,OAGFjF,oBAAS,GAHP,mBAGvBkF,EAHuB,KAGfC,EAHe,OAIVnF,mBAAS,MAJC,mBAIvBoF,EAJuB,KAInBC,EAJmB,KAKtBC,EAAUC,cAAVD,MACFE,EAAUC,cAChB1E,qBAAU,WACRC,IAASC,MAAK,SAACD,GAAD,OAAcqE,EAAMrE,EAAS0E,kBAC1C,IACH,IAAMC,EAAgB,SAACC,GACrB,GAAKV,EAME,CACL,IAAMW,EAAOC,KAAKC,MAAMC,eAAeC,QAAQ,SAE/Cb,EAAGc,WAAW,aACXC,IAAIN,EAAK9C,KAAKqD,eACdC,OAAO,CACNC,QAAQ,GAAD,mBACFT,EAAKS,SADH,CAEL,CACEC,KAAMjB,EACNvC,KAAMA,EACNI,IAAKyC,OAIV3E,MAAK,kBAAMuE,EAAQgB,KAAK,iBACxBC,OAAM,SAACC,GAAD,OAASC,MAAMD,EAAIE,gBAtBjB,CACX,IAAK7D,EAAKkB,OAER,YADA0C,MAAM,kBAGRxB,GAAU,KA4Bd,OAPApE,qBAAU,WACMiF,eAAeC,QAAQ,UAEnCjB,GAAY,KAEb,IAGD,yBAAKxB,UAAWC,IAAOC,SACpBqB,EAAW,kBAAC,IAAD,CAAU8B,GAAG,WAAc,KAEvC,yBAAKrD,UAAWC,IAAOqD,eACpB5B,EACC,kBAAC,EAAD,CAAc9B,OAAQuC,EAAe5C,KAAMA,IAE3C,yBAAKS,UAAWC,IAAOsD,MACrB,kBAACC,EAAA,EAAD,CACE1B,MAAM,iBACN2B,MAAOlE,EACPmE,aAAc,SAACpD,GAAD,OAAWmB,EAAQnB,EAAMC,OAAOkD,UAEhD,kBAACE,EAAA,EAAD,CAAe7B,MAAM,OAAOT,QAASc","file":"static/js/24.04ce68d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ImageCropper_wrapper__2Hb3o\",\"preview\":\"ImageCropper_preview__3e-GM\"};","import React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport styles from \"../styles/ImageCropper.module.css\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport firebase from \"../helpers/firebase\";\nimport Button from \"../components/PrimaryButton\";\n\nconst pixelRatio = 4;\nconst ImageCropper = (props) => {\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [crop, setCrop] = useState({ unit: \"px\", width: 100, aspect: 1 });\n  const [completedCrop, setCompletedCrop] = useState(null);\n  const [Firebase, setFirebase] = useState(null);\n  useEffect(() => {\n    firebase.then((firebase) => setFirebase(firebase));\n  }, []);\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingEnabled = false;\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n  }, [completedCrop]);\n\n  const onSelectFile = (event) => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n  const getResizedCanvas = (canvas, newWidth, newHeight) => {\n    const tmpCanvas = document.createElement(\"canvas\");\n    tmpCanvas.width = newWidth;\n    tmpCanvas.height = newHeight;\n\n    const ctx = tmpCanvas.getContext(\"2d\");\n    ctx.drawImage(\n      canvas,\n      0,\n      0,\n      canvas.width,\n      canvas.height,\n      0,\n      0,\n      newWidth,\n      newHeight\n    );\n\n    return tmpCanvas;\n  };\n\n  const generateDownload = (previewCanvas, crop) => {\n    if (!crop || !previewCanvas) {\n      return;\n    }\n\n    const canvas = getResizedCanvas(previewCanvas, crop.width, crop.height);\n    canvas.toBlob(\n      (blob) => {\n        const storageRef = Firebase.storage()\n          .ref()\n          .child(props.name + \".png\");\n        storageRef.put(blob).then((snapshot) => {\n          storageRef.getDownloadURL().then((url) => props.submit(url));\n        });\n      },\n      \"image/png\",\n      1\n    );\n  };\n\n  const onLoad = useCallback((img) => (imgRef.current = img), []);\n\n  return (\n    <div className={styles.wrapper}>\n      <div>\n        <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n      </div>\n      <ReactCrop\n        src={upImg}\n        onImageLoaded={onLoad}\n        crop={crop}\n        onChange={(c) => setCrop(c)}\n        onComplete={(c) => setCompletedCrop(c)}\n      />\n      {completedCrop?.width || completedCrop?.height ? (\n        <div\n          className={styles.preview}\n          style={{ width: completedCrop.width, height: completedCrop.height }}\n        >\n          <canvas\n            ref={previewCanvasRef}\n            style={{\n              width: completedCrop?.width ?? 0,\n              height: completedCrop?.height ?? 0,\n            }}\n          />\n        </div>\n      ) : null}\n      {completedCrop?.width || completedCrop?.height ? (\n        <Button\n          type=\"button\"\n          onClick={() =>\n            generateDownload(previewCanvasRef.current, completedCrop)\n          }\n        >\n          Upload\n        </Button>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ImageCropper;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/profileMaker.module.css\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../components/Input\";\nimport ImageCropper from \"../components/ImageCropper\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport firebase from \"../helpers/firebase\";\nimport PrimaryButton from \"../components/PrimaryButton\";\n\nconst ProfileMaker = (props) => {\n  const [redirect, setRedirect] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [toggle, setToggle] = useState(false);\n  const [db, setDb] = useState(null);\n  const { title } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    firebase.then((firebase) => setDb(firebase.firestore()));\n  }, []);\n  const submitHandler = (path) => {\n    if (!toggle) {\n      if (!name.length) {\n        alert(\"Enter the name\");\n        return;\n      }\n      setToggle(true);\n    } else {\n      const data = JSON.parse(sessionStorage.getItem(\"data\"));\n      // console.log(path, data, title, name);\n      db.collection(\"safespace\")\n        .doc(data.name.toLowerCase())\n        .update({\n          members: [\n            ...data.members,\n            {\n              role: title,\n              name: name,\n              url: path,\n            },\n          ],\n        })\n        .then(() => history.push(\"/safespace\"))\n        .catch((err) => alert(err.message));\n    }\n  };\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"token\");\n    if (!token) {\n      setRedirect(true);\n    }\n  }, []);\n\n  return (\n    <div className={styles.wrapper}>\n      {redirect ? <Redirect to=\"/login\" /> : null}\n\n      <div className={styles.imageUploader}>\n        {toggle ? (\n          <ImageCropper submit={submitHandler} name={name} />\n        ) : (\n          <div className={styles.flex}>\n            <Input\n              title=\"enter the name\"\n              value={name}\n              onChangeText={(event) => setName(event.target.value)}\n            />\n            <PrimaryButton title=\"Next\" onClick={submitHandler} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileMaker;\n"],"sourceRoot":""}